{"version":3,"file":"awsts.cjs.development.js","sources":["../src/cloudmap/index.ts","../src/ssm/index.ts","../src/appsync/index.ts","../src/opensearch/index.ts","../src/cognito/index.ts"],"sourcesContent":["import {\n  ServiceDiscoveryClient,\n  DiscoverInstancesCommand,\n} from '@aws-sdk/client-servicediscovery';\n\nconst DiscoverInstances = async (namespace: string, service: string) => {\n  const client = new ServiceDiscoveryClient({});\n  const command = new DiscoverInstancesCommand({\n    NamespaceName: namespace,\n    ServiceName: service,\n  });\n  const response = await client.send(command);\n  return response.Instances;\n};\n\nexport const CloudMap = { DiscoverInstances };\n","import { SSMClient, GetParameterCommand } from '@aws-sdk/client-ssm';\n\nconst GetParameter = async (name: string) => {\n  const client = new SSMClient({});\n  const command = new GetParameterCommand({\n    Name: name,\n    WithDecryption: true,\n  });\n  const response = await client.send(command);\n  return response.Parameter;\n};\n\nexport const SSM = { GetParameter };\n","import { AppSyncClient, ListApiKeysCommand } from '@aws-sdk/client-appsync';\n\nconst GetApiKey = async (apiId: string) => {\n  const client = new AppSyncClient({});\n  const command = new ListApiKeysCommand({ apiId });\n  const response = await client.send(command);\n  if (!!response.apiKeys) {\n    for (let i = 0; i < response.apiKeys.length; i++) {\n      let expires = response.apiKeys[i].expires;\n      if (!!expires && expires > Date.now() / 1000) {\n        if (!!response.apiKeys[i].id) {\n          return response.apiKeys[i].id;\n        }\n      }\n    }\n  }\n  return undefined;\n};\nexport const AppSync = { GetApiKey };\n","import { Client } from '@opensearch-project/opensearch'\n\nconst NewClient = (url: string, user: string, password: string) => {\n    const client = new Client({\n        node: `https://${url}`,\n        auth: {\n            username: user,\n            password,\n        }\n    });\n    const Create = (indexName: string, doc: any) => {\n        const res = client.index({\n            index: indexName,\n            body: doc\n        });\n        return res\n    }\n    return {\n        Create\n    }\n}\n\nexport const Opensearch = { NewClient }","import {\n  CognitoUserPool,\n  CognitoUser,\n  AuthenticationDetails,\n} from 'amazon-cognito-identity-js';\n\nlet UserPoolId: string\nlet ClientId: string\n\nconst Configure = (userPoolId: string, clientId: string) => {\n  UserPoolId = userPoolId\n  ClientId = clientId\n}\n\nconst GetJwtToken = async (username: string, password: string) => {\n  var authenticationData = {\n    Username: username,\n    Password: password,\n  };\n  var authenticationDetails = new AuthenticationDetails(authenticationData);\n  var poolData = { UserPoolId, ClientId };\n  var userPool = new CognitoUserPool(poolData);\n  var userData = {\n    Username: username,\n    Pool: userPool,\n  };\n  var cognitoUser = new CognitoUser(userData);\n  await new Promise((resolve, reject) => {\n    cognitoUser.authenticateUser(authenticationDetails, {\n      onSuccess: function (result) {\n        var accessToken = result.getAccessToken().getJwtToken();\n        console.log(accessToken);\n        resolve(accessToken);\n      },\n      onFailure: function (err) {\n        reject(err.message);\n      },\n    });\n  });\n};\n\nexport const Cognito = { Configure, GetJwtToken }"],"names":["DiscoverInstances","namespace","service","client","ServiceDiscoveryClient","command","DiscoverInstancesCommand","NamespaceName","ServiceName","send","response","Instances","CloudMap","GetParameter","name","SSMClient","GetParameterCommand","Name","WithDecryption","Parameter","SSM","GetApiKey","apiId","AppSyncClient","ListApiKeysCommand","apiKeys","i","length","expires","Date","now","id","undefined","AppSync","NewClient","url","user","password","Client","node","auth","username","Create","indexName","doc","res","index","body","Opensearch","UserPoolId","ClientId","Configure","userPoolId","clientId","GetJwtToken","authenticationData","Username","Password","authenticationDetails","AuthenticationDetails","poolData","userPool","CognitoUserPool","userData","Pool","cognitoUser","CognitoUser","Promise","resolve","reject","authenticateUser","onSuccess","result","accessToken","getAccessToken","getJwtToken","console","log","onFailure","err","message","Cognito"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,iBAAiB;EAAA,mFAAG,iBAAOC,SAAP,EAA0BC,OAA1B;IAAA;IAAA;MAAA;QAAA;UAAA;YAClBC,MADkB,GACT,IAAIC,6CAAJ,CAA2B,EAA3B,CADS;YAElBC,OAFkB,GAER,IAAIC,+CAAJ,CAA6B;cAC3CC,aAAa,EAAEN,SAD4B;cAE3CO,WAAW,EAAEN;aAFC,CAFQ;YAAA;YAAA,OAMDC,MAAM,CAACM,IAAP,CAAYJ,OAAZ,CANC;;UAAA;YAMlBK,QANkB;YAAA,iCAOjBA,QAAQ,CAACC,SAPQ;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAAjBX,iBAAiB;IAAA;;AAAA,GAAvB;;IAUaY,QAAQ,GAAG;EAAEZ,iBAAiB,EAAjBA;AAAF;;ACbxB,IAAMa,YAAY;EAAA,mFAAG,iBAAOC,IAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACbX,MADa,GACJ,IAAIY,mBAAJ,CAAc,EAAd,CADI;YAEbV,OAFa,GAEH,IAAIW,6BAAJ,CAAwB;cACtCC,IAAI,EAAEH,IADgC;cAEtCI,cAAc,EAAE;aAFF,CAFG;YAAA;YAAA,OAMIf,MAAM,CAACM,IAAP,CAAYJ,OAAZ,CANJ;;UAAA;YAMbK,QANa;YAAA,iCAOZA,QAAQ,CAACS,SAPG;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAAZN,YAAY;IAAA;;AAAA,GAAlB;;AAUA,IAAaO,GAAG,GAAG;EAAEP,YAAY,EAAZA;AAAF,CAAZ;;ACVP,IAAMQ,SAAS;EAAA,mFAAG,iBAAOC,KAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACVnB,MADU,GACD,IAAIoB,2BAAJ,CAAkB,EAAlB,CADC;YAEVlB,OAFU,GAEA,IAAImB,gCAAJ,CAAuB;cAAEF,KAAK,EAALA;aAAzB,CAFA;YAAA;YAAA,OAGOnB,MAAM,CAACM,IAAP,CAAYJ,OAAZ,CAHP;;UAAA;YAGVK,QAHU;;YAAA,IAIX,CAACA,QAAQ,CAACe,OAJC;cAAA;cAAA;;;YAKLC,CALK,GAKD,CALC;;UAAA;YAAA,MAKEA,CAAC,GAAGhB,QAAQ,CAACe,OAAT,CAAiBE,MALvB;cAAA;cAAA;;;YAMRC,OANQ,GAMElB,QAAQ,CAACe,OAAT,CAAiBC,CAAjB,EAAoBE,OANtB;;YAAA,MAOR,CAAC,CAACA,OAAF,IAAaA,OAAO,GAAGC,IAAI,CAACC,GAAL,KAAa,IAP5B;cAAA;cAAA;;;YAAA,IAQL,CAACpB,QAAQ,CAACe,OAAT,CAAiBC,CAAjB,EAAoBK,EARhB;cAAA;cAAA;;;YAAA,iCASDrB,QAAQ,CAACe,OAAT,CAAiBC,CAAjB,EAAoBK,EATnB;;UAAA;YAK+BL,CAAC,EALhC;YAAA;YAAA;;UAAA;YAAA,iCAcTM,SAdS;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAATX,SAAS;IAAA;;AAAA,GAAf;;AAgBA,IAAaY,OAAO,GAAG;EAAEZ,SAAS,EAATA;AAAF,CAAhB;;AChBP,IAAMa,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAcC,IAAd,EAA4BC,QAA5B;EACd,IAAMlC,MAAM,GAAG,IAAImC,iBAAJ,CAAW;IACtBC,IAAI,eAAaJ,GADK;IAEtBK,IAAI,EAAE;MACFC,QAAQ,EAAEL,IADR;MAEFC,QAAQ,EAARA;;GAJO,CAAf;;EAOA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAoBC,GAApB;IACX,IAAMC,GAAG,GAAG1C,MAAM,CAAC2C,KAAP,CAAa;MACrBA,KAAK,EAAEH,SADc;MAErBI,IAAI,EAAEH;KAFE,CAAZ;IAIA,OAAOC,GAAP;GALJ;;EAOA,OAAO;IACHH,MAAM,EAANA;GADJ;AAGH,CAlBD;;AAoBA,IAAaM,UAAU,GAAG;EAAEd,SAAS,EAATA;AAAF,CAAnB;;AChBP,IAAIe,UAAJ;AACA,IAAIC,QAAJ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAqBC,QAArB;EAChBJ,UAAU,GAAGG,UAAb;EACAF,QAAQ,GAAGG,QAAX;AACD,CAHD;;AAKA,IAAMC,WAAW;EAAA,mFAAG,iBAAOb,QAAP,EAAyBJ,QAAzB;IAAA;IAAA;MAAA;QAAA;UAAA;YACdkB,kBADc,GACO;cACvBC,QAAQ,EAAEf,QADa;cAEvBgB,QAAQ,EAAEpB;aAHM;YAKdqB,qBALc,GAKU,IAAIC,6CAAJ,CAA0BJ,kBAA1B,CALV;YAMdK,QANc,GAMH;cAAEX,UAAU,EAAVA,UAAF;cAAcC,QAAQ,EAARA;aANX;YAOdW,QAPc,GAOH,IAAIC,uCAAJ,CAAoBF,QAApB,CAPG;YAQdG,QARc,GAQH;cACbP,QAAQ,EAAEf,QADG;cAEbuB,IAAI,EAAEH;aAVU;YAYdI,WAZc,GAYA,IAAIC,mCAAJ,CAAgBH,QAAhB,CAZA;YAAA;YAAA,OAaZ,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;cAChBJ,WAAW,CAACK,gBAAZ,CAA6BZ,qBAA7B,EAAoD;gBAClDa,SAAS,EAAE,mBAAUC,MAAV;kBACT,IAAIC,WAAW,GAAGD,MAAM,CAACE,cAAP,GAAwBC,WAAxB,EAAlB;kBACAC,OAAO,CAACC,GAAR,CAAYJ,WAAZ;kBACAL,OAAO,CAACK,WAAD,CAAP;iBAJgD;gBAMlDK,SAAS,EAAE,mBAAUC,GAAV;kBACTV,MAAM,CAACU,GAAG,CAACC,OAAL,CAAN;;eAPJ;aADI,CAbY;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAAX1B,WAAW;IAAA;;AAAA,GAAjB;;AA2BA,IAAa2B,OAAO,GAAG;EAAE9B,SAAS,EAATA,SAAF;EAAaG,WAAW,EAAXA;AAAb,CAAhB;;;;;;;;"}