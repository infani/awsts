{"version":3,"file":"awsts.cjs.production.min.js","sources":["../src/cloudmap/index.ts","../src/cognito/index.ts","../src/ssm/index.ts","../src/appsync/index.ts","../src/opensearch/index.ts"],"sourcesContent":["import {\n  ServiceDiscoveryClient,\n  DiscoverInstancesCommand,\n} from '@aws-sdk/client-servicediscovery';\n\nconst DiscoverInstances = async (namespace: string, service: string) => {\n  const client = new ServiceDiscoveryClient({});\n  const command = new DiscoverInstancesCommand({\n    NamespaceName: namespace,\n    ServiceName: service,\n  });\n  const response = await client.send(command);\n  return response.Instances;\n};\n\nexport const CloudMap = { DiscoverInstances };\n","import {\n  CognitoUserPool,\n  CognitoUser,\n  AuthenticationDetails,\n} from 'amazon-cognito-identity-js';\n\nlet UserPoolId: string\nlet ClientId: string\n\nconst Configure = (userPoolId: string, clientId: string) => {\n  UserPoolId = userPoolId\n  ClientId = clientId\n}\n\nconst GetJwtToken = async (username: string, password: string) => {\n  var authenticationData = {\n    Username: username,\n    Password: password,\n  };\n  var authenticationDetails = new AuthenticationDetails(authenticationData);\n  var poolData = { UserPoolId, ClientId };\n  var userPool = new CognitoUserPool(poolData);\n  var userData = {\n    Username: username,\n    Pool: userPool,\n  };\n  var cognitoUser = new CognitoUser(userData);\n  await new Promise((resolve, reject) => {\n    cognitoUser.authenticateUser(authenticationDetails, {\n      onSuccess: function (result) {\n        var accessToken = result.getAccessToken().getJwtToken();\n        console.log(accessToken);\n        resolve(accessToken);\n      },\n      onFailure: function (err) {\n        reject(err.message);\n      },\n    });\n  });\n};\n\nexport const Cognito = { Configure, GetJwtToken }","import { SSMClient, GetParameterCommand } from '@aws-sdk/client-ssm';\n\nconst GetParameter = async (name: string) => {\n  const client = new SSMClient({});\n  const command = new GetParameterCommand({\n    Name: name,\n    WithDecryption: true,\n  });\n  const response = await client.send(command);\n  return response.Parameter;\n};\n\nexport const SSM = { GetParameter };\n","import { AppSyncClient, ListApiKeysCommand } from '@aws-sdk/client-appsync';\n\nconst GetApiKey = async (apiId: string) => {\n  const client = new AppSyncClient({});\n  const command = new ListApiKeysCommand({ apiId });\n  const response = await client.send(command);\n  if (!!response.apiKeys) {\n    for (let i = 0; i < response.apiKeys.length; i++) {\n      let expires = response.apiKeys[i].expires;\n      if (!!expires && expires > Date.now() / 1000) {\n        if (!!response.apiKeys[i].id) {\n          return response.apiKeys[i].id;\n        }\n      }\n    }\n  }\n  return undefined;\n};\nexport const AppSync = { GetApiKey };\n","import { Client } from '@opensearch-project/opensearch'\n\nconst NewClient = (url: string, user: string, password: string) => {\n    const client = new Client({\n        node: `https://${url}`,\n        auth: {\n            username: user,\n            password,\n        }\n    });\n    const Create = (indexName: string, doc: any) => {\n        const res = client.index({\n            index: indexName,\n            body: doc\n        });\n        return res\n    }\n    return {\n        Create\n    }\n}\n\nexport const Opensearch = { NewClient }"],"names":["UserPoolId","ClientId","CloudMap","DiscoverInstances","namespace","service","client","ServiceDiscoveryClient","command","DiscoverInstancesCommand","NamespaceName","ServiceName","_context","send","Instances","SSM","GetParameter","name","SSMClient","GetParameterCommand","Name","WithDecryption","Parameter","AppSync","GetApiKey","apiId","AppSyncClient","ListApiKeysCommand","response","apiKeys","i","length","expires","Date","now","id","undefined","Opensearch","NewClient","url","user","password","Client","node","auth","username","Create","indexName","doc","index","body","Cognito","Configure","userPoolId","clientId","GetJwtToken","authenticationDetails","AuthenticationDetails","Username","Password","userPool","CognitoUserPool","cognitoUser","CognitoUser","Pool","Promise","resolve","reject","authenticateUser","onSuccess","result","accessToken","getAccessToken","getJwtToken","console","log","onFailure","err","message"],"mappings":"q4NAKA,ICCIA,EACAC,EDQSC,EAAW,CAAEC,6BAVH,kBAAG,WAAOC,EAAmBC,GAA1B,QAAA,6BAAA,OAAA,sBAAA,OAAA,OAClBC,EAAS,IAAIC,yBAAuB,IACpCC,EAAU,IAAIC,2BAAyB,CAC3CC,cAAeN,EACfO,YAAaN,IAJSO,SAMDN,EAAOO,KAAKL,GANX,OAAA,gCAORM,WAPQ,OAAA,UAAA,0BAAH,qBAAA,oCEOVC,EAAM,CAAEC,wBAVH,kBAAG,WAAOC,GAAP,QAAA,6BAAA,OAAA,sBAAA,OAAA,OACbX,EAAS,IAAIY,YAAU,IACvBV,EAAU,IAAIW,sBAAoB,CACtCC,KAAMH,EACNI,gBAAgB,IAJCT,SAMIN,EAAOO,KAAKL,GANhB,OAAA,gCAOHc,WAPG,OAAA,UAAA,0BAAH,mBAAA,oCCgBLC,EAAU,CAAEC,qBAhBV,kBAAG,WAAOC,GAAP,cAAA,6BAAA,OAAA,sBAAA,OAAA,OACVnB,EAAS,IAAIoB,gBAAc,IAC3BlB,EAAU,IAAImB,qBAAmB,CAAEF,MAAAA,IAFzBb,SAGON,EAAOO,KAAKL,GAHnB,OAAA,KAGVoB,UACSC,SAJCjB,UAAA,MAKLkB,EAAI,EALC,OAAA,KAKEA,EAAIF,EAASC,QAAQE,SALvBnB,UAAA,MAAA,MAMRoB,EAAUJ,EAASC,QAAQC,GAAGE,UACjBA,EAAUC,KAAKC,MAAQ,MAP5BtB,UAAA,MAAA,IAQJgB,EAASC,QAAQC,GAAGK,IARhBvB,UAAA,MAAA,yBASDgB,EAASC,QAAQC,GAAGK,IATnB,QAK+BL,IAL/BlB,SAAA,MAAA,QAAA,8BAcTwB,GAdS,QAAA,UAAA,0BAAH,mBAAA,oCCoBFC,EAAa,CAAEC,UApBV,SAACC,EAAaC,EAAcC,GAC1C,IAAMnC,EAAS,IAAIoC,SAAO,CACtBC,gBAAiBJ,EACjBK,KAAM,CACFC,SAAUL,EACVC,SAAAA,KAUR,MAAO,CACHK,OARW,SAACC,EAAmBC,GAK/B,OAJY1C,EAAO2C,MAAM,CACrBA,MAAOF,EACPG,KAAMF,QH4BLG,EAAU,CAAEC,UAhCP,SAACC,EAAoBC,GACrCtD,EAAaqD,EACbpD,EAAWqD,GA8BuBC,uBA3BnB,kBAAG,WAAOV,EAAkBJ,GAAzB,UAAA,6BAAA,OAAA,sBAAA,OAAA,OAKde,EAAwB,IAAIC,wBAJP,CACvBC,SAAUb,EACVc,SAAUlB,IAIRmB,EAAW,IAAIC,kBADJ,CAAE7D,WAAAA,EAAYC,SAAAA,IAMzB6D,EAAc,IAAIC,cAJP,CACbL,SAAUb,EACVmB,KAAMJ,IAVUhD,SAaZ,IAAIqD,SAAQ,SAACC,EAASC,GAC1BL,EAAYM,iBAAiBZ,EAAuB,CAClDa,UAAW,SAAUC,GACnB,IAAIC,EAAcD,EAAOE,iBAAiBC,cAC1CC,QAAQC,IAAIJ,GACZL,EAAQK,IAEVK,UAAW,SAAUC,GACnBV,EAAOU,EAAIC,eArBC,OAAA,UAAA,0BAAH,qBAAA"}